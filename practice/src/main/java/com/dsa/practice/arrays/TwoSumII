package com.dsa.practice.arrays;

class TwoSumII {
    public int[] twSum(int[] numbers, int target) {
        // Initialize two pointers
        /**
         * Optimal solution here uses two pointers 
         * and since the array is sorted we can use
         * binary search here to find the two indices
         * that sum up to the target.
         * The time complexity is O(n) and space complexity is O(1).
         */
        int left = 0;
        int right = numbers.length - 1;

        // Loop until the two pointers meet
        while (left < right) {
            int sum = numbers[left] + numbers[right];
            if (sum == target) {
                return new int[]{left + 1, right + 1}; // Return 1-based indices adding 1 since the array is 1 based
            } else if (sum < target) {
                left++; // Move left pointer to the right
            } else {
                right--; // Move right pointer to the left
            }
        }
        return new int[0]; // Return empty array if no solution found
    }


    public static void main(String[] args) {
        TwoSumII ts = new TwoSumII();
        int[] numbers = {2, 7, 11, 15};
        int target = 9;
        int[] result = ts.twoSum(numbers, target);
        System.out.println("Indices: " + result[0] + ", " + result[1]);
    }
}